<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication 
	xmlns:comp="nl.aboutcoding.servicebrowser.view.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" 
	width="835" 
	height="661" 
	creationComplete="init()" 
	verticalAlign="middle" 
	horizontalAlign="center" 
	borderColor="#000000" 
	backgroundGradientAlphas="[1.0, 1.0]" 
	backgroundGradientColors="[#2B2B2B, #757575]" 
	borderStyle="none" 
	showTitleBar="false" 
	showStatusBar="false" 
	currentState="Connect" minHeight="675" minWidth="837">
	
	<mx:Style source="style.css"/>
	
	<mx:states>
		<mx:State name="Connect">
			<mx:SetProperty target="{serviceInfoLabel}" name="visible" value="false"/>
			<mx:AddChild position="lastChild">
				<comp:ConnectPanel/>
			</mx:AddChild>
			<mx:SetProperty target="{appControlbar}" name="visible" value="false"/>
			<mx:SetStyle name="themeColor" value="#A2FF00"/>
			<mx:SetProperty target="{callPanel}" name="visible" value="false"/>
			<mx:SetStyle name="backgroundImage"/>
			
		</mx:State>
		<mx:State name="OutputMax">
			<mx:SetProperty target="{serviceInfoLabel}" name="visible" value="false"/>
			<mx:SetProperty target="{callPanel}" name="height"/>
			<mx:SetProperty target="{callPanel}" name="y"/>
			<mx:SetStyle target="{callPanel}" name="bottom" value="10"/>
			<mx:SetProperty target="{callPanel}" name="x"/>
			<mx:SetStyle target="{callPanel}" name="right" value="10"/>
			<mx:SetProperty target="{callPanel}" name="width"/>
			<mx:SetStyle target="{callPanel}" name="left" value="10"/>
			<mx:SetStyle target="{callPanel}" name="top" value="73"/>
			<mx:SetStyle target="{toggleServiceInfoBtn}" name="icon" value="@Embed(source='assets/bullet_arrow_down.png')"/>
			<mx:SetProperty target="{toggleServiceInfoBtn}" name="label"
							value="Show Sevice Info"/>
		</mx:State>
	</mx:states>
	<comp:ServicesPanel layout="absolute" left="10" top="73" styleName="lightTitle" id="serviceInfoLabel" minWidth="817" minHeight="273" title="Services and Methods" right="10" height="273"></comp:ServicesPanel>
	<mx:ApplicationControlBar height="55" id="appControlbar" left="10" top="10" right="10">
		<mx:Button label="Quit" labelPlacement="bottom" icon="@Embed(source='assets/stop.png')" paddingTop="5" click="onQuitClick(event)"/>
		<mx:Button label="Gateways" icon="@Embed(source='assets/connect.png')" labelPlacement="bottom" paddingTop="5" click="onConnectClick(event)"/>
		<mx:VRule width="2" height="44"/>
		<mx:Button label="Hide Sevice Info" labelPlacement="bottom" icon="@Embed(source='assets/bullet_arrow_up.png')" 
				   paddingTop="5" click="toggleServiceInfo()" id="toggleServiceInfoBtn"/>
		<mx:VRule width="2" height="44"/>
		<mx:Button label="Save Profile" labelPlacement="bottom" icon="@Embed(source='assets/savesetting.png')" 
				   paddingTop="5" click="saveProfile_clickHandler(event)" id="saveProfile"/>
	</mx:ApplicationControlBar>
	<comp:CallPanel id="callPanel" bottom="10" right="10" left="10" top="354"></comp:CallPanel>
	
	<mx:transitions>
		<mx:Transition id="myTransition" fromState="" toState="OutputMax">
			<mx:Parallel target="{callPanel}">
				<mx:Move duration="400"/>
				<mx:Resize duration="400"/>
			</mx:Parallel>
		</mx:Transition>
		<mx:Transition id="second" fromState="OutputMax" toState="">
			<mx:Parallel target="{callPanel}">
				<mx:Move duration="400"/>
				<mx:Resize duration="400"/>
			</mx:Parallel>
		</mx:Transition>
	</mx:transitions>
	
	<mx:Label text="Pinta version " x="700" y="30" color="#D5D5D5" fontSize="18" id="ver"/>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import nl.aboutcoding.servicebrowser.business.Connector;
			import nl.aboutcoding.servicebrowser.controller.ConnectController;
			import nl.aboutcoding.servicebrowser.controller.EventHub;
			import nl.aboutcoding.servicebrowser.events.StatusChangeEvent;
			import nl.aboutcoding.servicebrowser.model.RMethod;
			import nl.aboutcoding.servicebrowser.model.ServiceInfo;
			
			[Bindable]
			private var serviceInfo:ServiceInfo;
			private var eventHub:EventHub;
			private var connector:Connector;
			
			[Bindable]
			private var selectedMethod:RMethod;
			private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
			
			
			public function init():void
			{
				serviceInfo = ServiceInfo.getInstance();
				eventHub = EventHub.getInstance();
				connector = Connector.getInstance();
				setApplicationVersion();
				
				eventHub.addEventListener( StatusChangeEvent.CONNECTED, onConnect );
				eventHub.addEventListener( StatusChangeEvent.QUIT, onQuit );
				
				checkForUpdate();
			}
			
			private function checkForUpdate():void {
				setApplicationVersion(); // Find the current version so we can show it below
				appUpdater.updateURL = "http://drainbamage.nl/pinta/update.xml"; // Server-side XML file describing update
				appUpdater.isCheckForUpdateVisible = false; // We won't ask permission to check for an update
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate); // Once initialized, run onUpdate
				appUpdater.addEventListener(ErrorEvent.ERROR, onError); // If something goes wrong, run onError
				appUpdater.initialize(); // Initialize the update framework
			}
			
			private function onError(event:ErrorEvent):void {
				Alert.show(event.toString());
			}
			
			private function onUpdate(event:UpdateEvent):void {
				appUpdater.checkNow(); // Go check for an update now
			}
			
			// Find the current version for our Label below
			private function setApplicationVersion():void {
				var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = appXML.namespace();
				ver.text = "Pinta " + appXML.ns::versionNumber;
			}
			
			private function onQuit( event:StatusChangeEvent ):void
			{
				nativeApplication.exit();
			}
			
			private function onConnect( event:StatusChangeEvent ):void
			{
				this.currentState = null;
			}
			
			private function onQuitClick( event:MouseEvent):void
			{
				eventHub.dispatchEvent( new StatusChangeEvent( StatusChangeEvent.QUIT ) );
			}
			
			private function onConnectClick( event:MouseEvent ):void
			{
				eventHub.dispatchEvent( new StatusChangeEvent( StatusChangeEvent.DISCONNECTED ) );
				this.currentState = 'Connect';
			}
			
			private function toggleServiceInfo():void
			{
				if( currentState == null )
				{
					currentState = 'OutputMax';
				} else {
					currentState = null;
				}
			}
			
			protected function saveProfile_clickHandler(event:MouseEvent):void
			{
				var file:File = new File();
				var ba:ByteArray = new ByteArray();
				ba.writeObject(ConnectController.getInstance().profiles);
				file.save(ba,"Pinta.obj");
			}
		]]>
	</mx:Script>
</mx:WindowedApplication>
